package org.modelix.model.mpsadapters.mps

import jetbrains.mps.internal.collections.runtime.ISelector
import jetbrains.mps.internal.collections.runtime.ListSequence
import jetbrains.mps.internal.collections.runtime.Sequence
import jetbrains.mps.smodel.adapter.ids.SConceptId
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory
import jetbrains.mps.smodel.language.ConceptRegistry
import jetbrains.mps.smodel.language.LanguageRegistry
import jetbrains.mps.smodel.language.LanguageRuntime
import jetbrains.mps.smodel.runtime.ConceptDescriptor
import jetbrains.mps.smodel.runtime.illegal.IllegalConceptDescriptor
import org.jetbrains.mps.openapi.language.SAbstractConcept
import org.modelix.model.api.IConcept
import org.modelix.model.api.ILanguageRepository
import org.modelix.model.api.PNodeAdapter.Companion.wrap
import java.util.function.Consumer

/*Generated by MPS */
class MPSLanguageRepository() : ILanguageRepository {
    public override fun resolveConcept(uid: String): IConcept? {
        if (!(uid.startsWith("mps:"))) {
            return null
        }
        val conceptId: SConceptId?
        try {
            conceptId = SConceptId.deserialize(uid.substring(4))
        } catch (ex: Exception) {
            return null
        }
        if (conceptId == null) {
            return null
        }
        val conceptDescriptor: ConceptDescriptor = ConceptRegistry.getInstance().getConceptDescriptor(conceptId)
        if (conceptDescriptor is IllegalConceptDescriptor) {
            return null
        }
        return SConceptAdapter.Companion.wrap(MetaAdapterFactory.getAbstractConcept(conceptDescriptor))
    }

    public override fun getAllConcepts(): List<IConcept> {
        val result: List<IConcept> = ListSequence.fromList(ArrayList())
        LanguageRegistry.getInstance().withAvailableLanguages(object : Consumer<LanguageRuntime> {
            public override fun accept(language: LanguageRuntime) {
                val concepts: Iterable<SAbstractConcept> = language.getIdentity().getConcepts()
                ListSequence.fromList<IConcept>(result).addSequence(
                    Sequence.fromIterable<SAbstractConcept>(concepts)
                        .select<IConcept>(object : ISelector<SAbstractConcept?, IConcept?>() {
                            public override fun select(it: SAbstractConcept?): IConcept? {
                                return SConceptAdapter.Companion.wrap(it)
                            }
                        }),
                )
            }
        })
        return result
    }

    public override fun getPriority(): Int {
        return 1000 - 1 // org.modelix.model.mpsadapters.MPSLanguageRepository has 1000
    }

    companion object {
        val INSTANCE: MPSLanguageRepository = MPSLanguageRepository()
    }
}
