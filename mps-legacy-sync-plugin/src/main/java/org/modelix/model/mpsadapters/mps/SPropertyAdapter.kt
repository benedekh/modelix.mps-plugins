package org.modelix.model.mpsadapters.mps

import jetbrains.mps.smodel.adapter.ids.MetaIdHelper
import org.jetbrains.mps.openapi.language.SProperty
import org.modelix.model.api.IConcept
import org.modelix.model.api.IProperty
import org.modelix.model.api.PNodeAdapter.Companion.wrap

/*Generated by MPS */
class SPropertyAdapter(val property: SProperty) : IProperty {

    override fun getUID(): String {
        return MetaIdHelper.getProperty(property).serialize()
    }

    override fun getConcept(): IConcept {
        return (SConceptAdapter.Companion.wrap(property.owner))
    }

    override fun getSimpleName(): String {
        return property.name
    }

    override val isOptional: Boolean
        get() {
            return true
        }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || this.javaClass != o.javaClass) {
            return false
        }
        val that: SPropertyAdapter = o as SPropertyAdapter
        return !(if (property != null) !((property == that.property)) else that.property != null)
    }

    override fun hashCode(): Int {
        var result: Int = 0
        result = 31 * result + ((if (property != null) (property as Any).hashCode() else 0))
        return result
    }
}
