package org.modelix.model.mpsadapters.plugin

import jetbrains.mps.smodel.MPSModuleRepository
import jetbrains.mps.smodel.SNodePointer
import jetbrains.mps.smodel.adapter.structure.FormatException
import org.apache.log4j.Level
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import org.jetbrains.mps.openapi.persistence.PersistenceFacade
import org.jetbrains.mps.openapi.persistence.PersistenceFacade.IncorrectNodeIdFormatException
import org.modelix.model.api.INodeReference
import org.modelix.model.api.INodeReferenceSerializer
import org.modelix.model.mpsadapters.mps.SModelAsNode
import org.modelix.model.mpsadapters.mps.SModuleAsNode
import org.modelix.model.mpsadapters.mps.SNodeReferenceAdapter
import org.modelix.model.mpsadapters.mps.SRepositoryAsNode
import java.util.Objects

/*Generated by MPS */
class MPSNodeReferenceSerializer() : INodeReferenceSerializer {
    public override fun serialize(ref: INodeReference): String? {
        if (ref is SNodeReferenceAdapter) {
            return NODE_PREFIX + SNodePointer.serialize(ref.getReference())
        } else if (ref is SModelAsNode.NodeReference) {
            return MODEL_PREFIX + PersistenceFacade.getInstance().asString(ref.modelRef)
        } else if (ref is SModuleAsNode.NodeReference) {
            return MODULE_PREFIX + PersistenceFacade.getInstance().asString(ref.moduleRef)
        } else if (ref is SRepositoryAsNode.NodeReference) {
            return SERIALIZED_GLOBAL_REPOSITORY
        } else {
            return null
        }
    }

    public override fun deserialize(serialized: String): INodeReference? {
        if (serialized.startsWith(NODE_PREFIX)) {
            return SNodeReferenceAdapter(
                PersistenceFacade.getInstance().createNodeReference(
                    serialized.substring(
                        NODE_PREFIX.length,
                    ),
                ),
            )
        } else if (serialized.startsWith(MODEL_PREFIX)) {
            return SModelAsNode.NodeReference(
                PersistenceFacade.getInstance().createModelReference(
                    serialized.substring(
                        MODEL_PREFIX.length,
                    ),
                ),
            )
        } else if (serialized.startsWith(MODULE_PREFIX)) {
            return SModuleAsNode.NodeReference(
                PersistenceFacade.getInstance().createModuleReference(
                    serialized.substring(
                        MODULE_PREFIX.length,
                    ),
                ),
            )
        } else if (Objects.equals(serialized, SERIALIZED_GLOBAL_REPOSITORY)) {
            return SRepositoryAsNode(MPSModuleRepository.getInstance()).reference
        }

        // legacy deserializer for existing serialized node references without prefix
        try {
            return SNodeReferenceAdapter(SNodePointer.deserialize(serialized))
        } catch (ex: FormatException) {
            if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Failed to deserialize " + serialized, ex)
            }
            return null
        } catch (ex: IncorrectNodeIdFormatException) {
            return null
        } catch (ex: RuntimeException) {
            if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Failed to deserialize " + serialized, ex)
            }
            return null
        }
    }

    companion object {
        private val LOG: Logger = LogManager.getLogger(MPSNodeReferenceSerializer::class.java)
        private val NODE_PREFIX: String = "mps-node:"
        private val MODEL_PREFIX: String = "mps-model:"
        private val MODULE_PREFIX: String = "mps-module:"
        private val SERIALIZED_GLOBAL_REPOSITORY: String = "mps-repository"
        val INSTANCE: MPSNodeReferenceSerializer = MPSNodeReferenceSerializer()
    }
}
