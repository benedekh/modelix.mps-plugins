package org.modelix.model.mpsadapters.mps

import org.jetbrains.mps.openapi.language.SAbstractConcept
import org.jetbrains.mps.openapi.language.SConcept
import org.jetbrains.mps.openapi.language.SContainmentLink
import org.jetbrains.mps.openapi.language.SInterfaceConcept
import org.jetbrains.mps.openapi.language.SLanguage
import org.jetbrains.mps.openapi.language.SProperty
import org.jetbrains.mps.openapi.language.SReferenceLink
import org.jetbrains.mps.openapi.model.SNode
import org.jetbrains.mps.openapi.model.SNodeReference

/*Generated by MPS */
class DummyConcept() : SConcept {
    public override fun getSuperConcept(): SConcept? {
        throw UnsupportedOperationException()
    }

    public override fun getSuperInterfaces(): Iterable<SInterfaceConcept> {
        throw UnsupportedOperationException()
    }

    public override fun isRootable(): Boolean {
        throw UnsupportedOperationException()
    }

    public override fun getName(): String {
        throw UnsupportedOperationException()
    }

    public override fun getLanguage(): SLanguage {
        throw UnsupportedOperationException()
    }

    public override fun getReferenceLinks(): Collection<SReferenceLink> {
        throw UnsupportedOperationException()
    }

    public override fun getContainmentLinks(): Collection<SContainmentLink> {
        throw UnsupportedOperationException()
    }

    public override fun getProperties(): Collection<SProperty> {
        throw UnsupportedOperationException()
    }

    public override fun isSubConceptOf(concept: SAbstractConcept): Boolean {
        throw UnsupportedOperationException()
    }

    public override fun isAbstract(): Boolean {
        throw UnsupportedOperationException()
    }

    @Deprecated("")
    public override fun getDeclarationNode(): SNode? {
        throw UnsupportedOperationException()
    }

    public override fun getSourceNode(): SNodeReference? {
        throw UnsupportedOperationException()
    }

    public override fun isValid(): Boolean {
        throw UnsupportedOperationException()
    }

    public override fun getConceptAlias(): String {
        throw UnsupportedOperationException()
    }

    public override fun getShortDescription(): String {
        throw UnsupportedOperationException()
    }

    public override fun getHelpUrl(): String {
        throw UnsupportedOperationException()
    }

    @Deprecated("")
    public override fun getQualifiedName(): String {
        throw UnsupportedOperationException()
    }
}
