package org.modelix.model.mpsadapters.mps

import jetbrains.mps.internal.collections.runtime.ISelector
import jetbrains.mps.internal.collections.runtime.Sequence
import jetbrains.mps.smodel.SReference
import jetbrains.mps.util.IterableUtil
import org.jetbrains.mps.openapi.language.SAbstractConcept
import org.jetbrains.mps.openapi.language.SConcept
import org.jetbrains.mps.openapi.language.SContainmentLink
import org.jetbrains.mps.openapi.language.SProperty
import org.jetbrains.mps.openapi.language.SReferenceLink
import org.jetbrains.mps.openapi.model.SModel
import org.jetbrains.mps.openapi.model.SNode
import org.jetbrains.mps.openapi.model.SNodeId
import org.jetbrains.mps.openapi.model.SNodeReference
import org.modelix.model.api.PNodeAdapter.Companion.wrap
import java.lang.reflect.Field
import java.lang.reflect.Modifier
import java.util.Objects

/*Generated by MPS */
class ANode(private val node: SNode) : jetbrains.mps.smodel.SNode(DummyConcept(), DummySNodeId()), SNode {
    init {

        // We don't really want to extend SNode, but some code in the editor is coupled to this class.
        // Here all fields of this class are set to null, because we override all methods.
        for (field: Field in jetbrains.mps.smodel.SNode::class.java.getDeclaredFields()) {
            field.setAccessible(true)
            if (Modifier.isStatic(field.getModifiers())) {
                continue
            }
            if (Modifier.isFinal(field.getModifiers())) {
                continue
            }
            if (Objects.equals(field.getName(), "myOwner")) {
                continue
            }
            try {
                field.set(this, null)
            } catch (ex: Exception) {
                throw RuntimeException(ex)
            }
        }
    }

    public override fun getModel(): SModel? {
        return node.getModel()
    }

    public override fun getNodeId(): SNodeId {
        return node.getNodeId()
    }

    public override fun getReference(): SNodeReference {
        return ANodeReference(node.getReference())
    }

    public override fun getConcept(): SConcept {
        return node.getConcept()
    }

    public override fun isInstanceOfConcept(concept: SAbstractConcept): Boolean {
        return node.isInstanceOfConcept(concept)
    }

    public override fun getPresentation(): String {
        return node.getPresentation()
    }

    public override fun getName(): String? {
        return node.getName()
    }

    public override fun addChild(link: SContainmentLink, node: SNode) {
        throw UnsupportedOperationException()
    }

    public override fun insertChildBefore(link: SContainmentLink, node: SNode, node1: SNode?) {
        throw UnsupportedOperationException()
    }

    public override fun insertChildAfter(link: SContainmentLink, node: SNode, node1: SNode?) {
        throw UnsupportedOperationException()
    }

    public override fun removeChild(node: SNode) {
        throw UnsupportedOperationException()
    }

    public override fun delete() {
        node.delete()
    }

    public override fun getContainingRoot(): jetbrains.mps.smodel.SNode {
        return (wrap(node.getContainingRoot()))!!
    }

    public override fun getContainmentLink(): SContainmentLink? {
        return node.getContainmentLink()
    }

    public override fun getFirstChild(): SNode? {
        return wrap(node.getFirstChild())
    }

    public override fun getLastChild(): SNode? {
        return wrap(node.getLastChild())
    }

    public override fun getPrevSibling(): jetbrains.mps.smodel.SNode? {
        return wrap(node.getPrevSibling())
    }

    public override fun getNextSibling(): jetbrains.mps.smodel.SNode? {
        return wrap(node.getNextSibling())
    }

    public override fun getChildren(link: SContainmentLink): List<jetbrains.mps.smodel.SNode> {
        return node.getChildren(link).map { wrap(it) }
    }

    public override fun getChildren(): List<jetbrains.mps.smodel.SNode> {
        return node.getChildren().map { wrap(it) }
    }

    public override fun setReferenceTarget(link: SReferenceLink, target: SNode?) {
        node.setReferenceTarget(link, unwrap(target))
    }

    public override fun getReferenceTarget(link: SReferenceLink): jetbrains.mps.smodel.SNode? {
        return wrap(node.getReferenceTarget(link))
    }

    public override fun getReference(link: SReferenceLink): SReference? {
        return AReference.Companion.wrap(node.getReference(link))
    }

    public override fun setReference(link: SReferenceLink, reference: org.jetbrains.mps.openapi.model.SReference?) {
        throw UnsupportedOperationException()
    }

    public override fun getReferences(): List<SReference> {
        val references: Iterable<org.jetbrains.mps.openapi.model.SReference> = node.getReferences()
        return Sequence.fromIterable(references)
            .select(object : ISelector<org.jetbrains.mps.openapi.model.SReference, SReference>() {
                public override fun select(it: org.jetbrains.mps.openapi.model.SReference): SReference {
                    val r: SReference = AReference(it)
                    return r
                }
            }).toListSequence()
    }

    public override fun getProperties(): Iterable<SProperty> {
        return node.getProperties()
    }

    public override fun hasProperty(property: SProperty): Boolean {
        return node.hasProperty(property)
    }

    public override fun getProperty(property: SProperty): String? {
        return node.getProperty(property)
    }

    public override fun setProperty(property: SProperty, value: String?) {
        node.setProperty(property, value)
    }

    public override fun getUserObject(key: Any): Any {
        return node.getUserObject(key)
    }

    public override fun putUserObject(key: Any, value: Any?) {
        node.putUserObject(key, value)
    }

    public override fun getUserObjectKeys(): Iterable<Any> {
        return node.getUserObjectKeys()
    }

    @Deprecated("")
    public override fun getRoleInParent(): String {
        return node.getRoleInParent()
    }

    @Deprecated("")
    public override fun setProperty(string: String, string1: String) {
        throw UnsupportedOperationException()
    }

    @Deprecated("")
    public override fun getPropertyNames(): Collection<String> {
        return IterableUtil.asList(node.getPropertyNames())
    }

    @Deprecated("")
    public override fun setReferenceTarget(string: String, node: SNode?) {
        throw UnsupportedOperationException()
    }

    @Deprecated("")
    public override fun getReferenceTarget(string: String): jetbrains.mps.smodel.SNode {
        return (wrap(node.getReferenceTarget(string)))!!
    }

    @Deprecated("")
    public override fun getReference(role: String): SReference {
        throw UnsupportedOperationException()
    }

    @Deprecated("")
    public override fun setReference(string: String, reference: org.jetbrains.mps.openapi.model.SReference?) {
        throw UnsupportedOperationException()
    }

    @Deprecated("")
    public override fun insertChildBefore(role: String, newChild: SNode, anchor: SNode?) {
        node.insertChildBefore(role, newChild, unwrap(anchor))
    }

    @Deprecated("")
    public override fun addChild(role: String, newChild: SNode) {
        node.addChild(role, newChild)
    }

    @Deprecated("")
    public override fun getChildren(role: String): List<jetbrains.mps.smodel.SNode> {
        return node.getChildren(role).map { it as jetbrains.mps.smodel.SNode }
    }

    public override fun toString(): String {
        return "ANode"
    }

    public override fun setId(id: SNodeId?) {
        throw UnsupportedOperationException()
    }

    override fun firstChild(): jetbrains.mps.smodel.SNode {
        throw UnsupportedOperationException()
    }

    override fun treePrevious(): jetbrains.mps.smodel.SNode {
        throw UnsupportedOperationException()
    }

    public override fun treeNext(): jetbrains.mps.smodel.SNode {
        throw UnsupportedOperationException()
    }

    override fun treeParent(): jetbrains.mps.smodel.SNode {
        return (wrap(node.getParent()))!!
    }

    override fun children_insertBefore(anchor: jetbrains.mps.smodel.SNode, node: jetbrains.mps.smodel.SNode) {
        throw UnsupportedOperationException()
    }

    override fun children_remove(node: jetbrains.mps.smodel.SNode) {
        throw UnsupportedOperationException()
    }

    public override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o is NodeToSNodeAdapter) {
            throw RuntimeException("Forgot to wrap an SNode with an ANode?")
        }
        if (o == null || this.javaClass != o.javaClass) {
            return false
        }
        val that: ANode = o as ANode
        if ((if (node != null) !((node == that.node)) else that.node != null)) {
            return false
        }
        return true
    }

    public override fun hashCode(): Int {
        var result: Int = 0
        result = 31 * result + ((if (node != null) (node as Any).hashCode() else 0))
        return result
    }

    companion object {
        private val USER_OBJECT_KEY: String = ANode::class.java.getName()

        @JvmName("wrap_nullable")
        fun wrap(nodeToWrap: SNode?): jetbrains.mps.smodel.SNode? {
            return if (nodeToWrap == null) null else wrap(nodeToWrap)
        }
        fun wrap(nodeToWrap: SNode): jetbrains.mps.smodel.SNode {
            if (nodeToWrap is jetbrains.mps.smodel.SNode) {
                // The purpose of ANode is to allow casts to jetbrains.mps.smodel.SNode.
                // No ANode required if it already is a subclass of jetbrains.mps.smodel.SNode.
                return nodeToWrap
            }
            var instance: ANode? = as_ile5t_a0a2a2(nodeToWrap.getUserObject(USER_OBJECT_KEY), ANode::class.java)
            if (instance == null) {
                instance = ANode(nodeToWrap)
                nodeToWrap.putUserObject(USER_OBJECT_KEY, instance)
            }
            return instance
        }

        fun unwrap(nodeToUnwrap: SNode?): SNode? {
            if (nodeToUnwrap == null) {
                return null
            }
            if (nodeToUnwrap is ANode) {
                return nodeToUnwrap.node
            }
            return nodeToUnwrap
        }

        private fun <T> as_ile5t_a0a2a2(o: Any, type: Class<T>): T? {
            return (if (type.isInstance(o)) o as T else null)
        }
    }
}
