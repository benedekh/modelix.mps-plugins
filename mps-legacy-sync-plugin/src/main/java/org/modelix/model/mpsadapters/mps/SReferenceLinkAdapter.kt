package org.modelix.model.mpsadapters.mps

import jetbrains.mps.smodel.adapter.ids.MetaIdHelper
import org.jetbrains.mps.openapi.language.SReferenceLink
import org.modelix.model.api.IConcept
import org.modelix.model.api.IReferenceLink

/*Generated by MPS */
class SReferenceLinkAdapter(private val link: SReferenceLink?) : IReferenceLink {
    fun getLink(): SReferenceLink? {
        return link
    }

    override fun getUID(): String {
        return MetaIdHelper.getAssociation(link).serialize()
    }

    override fun getConcept(): IConcept {
        return (SConceptAdapter.Companion.wrap(link!!.owner))
    }

    override fun getSimpleName(): String {
        return link!!.name
    }

    override val targetConcept: IConcept
        get() {
            return SConceptAdapter(link!!.targetConcept)
        }

    override val isOptional: Boolean
        get() {
            return link!!.isOptional
        }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || this.javaClass != o.javaClass) {
            return false
        }
        val that: SReferenceLinkAdapter = o as SReferenceLinkAdapter
        return !(if (link != null) !((link == that.link)) else that.link != null)
    }

    override fun hashCode(): Int {
        var result: Int = 0
        result = 31 * result + ((if (link != null) (link as Any).hashCode() else 0))
        return result
    }
}
