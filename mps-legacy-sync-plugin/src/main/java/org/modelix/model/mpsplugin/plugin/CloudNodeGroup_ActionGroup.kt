package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.ActionManager
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.extensions.PluginId
import jetbrains.mps.plugins.actions.GeneratedActionGroup
import jetbrains.mps.workbench.action.ApplicationPlugin

/*Generated by MPS */
class CloudNodeGroup_ActionGroup(plugin: ApplicationPlugin) : GeneratedActionGroup("CloudNodeGroup", ID, plugin) {
    init {
        setIsInternal(false)
        isPopup = false
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.AddProjectNode_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.AddModuleNode_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.AddModelNode_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.AddProjectBinding_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.StoreAllModules_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.DeleteProject_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.DeleteModule_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.AddTransientModuleBinding_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.RemoveTransientModuleBinding_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.CheckoutModule_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.CheckoutAndSyncModule_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.NavigateToMpsNode_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.ShowProperties_Action")
        this@CloudNodeGroup_ActionGroup.addAction("org.modelix.model.mpsplugin.plugin.ShowReferences_Action")
        run({
            val newAction: GeneratedActionGroup = CloudNodeGroupAddChild_ActionGroup(applicationPlugin)
            val manager: ActionManager = ActionManager.getInstance()
            var oldAction: AnAction? = manager.getAction(newAction.id)
            if (oldAction == null) {
                manager.registerAction(newAction.id, newAction, PluginId.getId("org.modelix.model.mpsplugin"))
                oldAction = newAction
            }
            this@CloudNodeGroup_ActionGroup.addAction(oldAction)
        })
        run({
            val newAction: GeneratedActionGroup = CloudNodeGroupSetProperty_ActionGroup(applicationPlugin)
            val manager: ActionManager = ActionManager.getInstance()
            var oldAction: AnAction? = manager.getAction(newAction.id)
            if (oldAction == null) {
                manager.registerAction(newAction.id, newAction, PluginId.getId("org.modelix.model.mpsplugin"))
                oldAction = newAction
            }
            this@CloudNodeGroup_ActionGroup.addAction(oldAction!!)
        })
    }

    companion object {
        val ID: String = "org.modelix.model.mpsplugin.plugin.CloudNodeGroup_ActionGroup"
    }
}
