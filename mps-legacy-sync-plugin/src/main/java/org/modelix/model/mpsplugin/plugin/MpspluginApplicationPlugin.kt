package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.extensions.PluginId
import jetbrains.mps.ide.actions.ProjectActions_ActionGroup
import jetbrains.mps.ide.actions.SolutionActions_ActionGroup
import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin
import jetbrains.mps.plugins.part.ApplicationPluginPart

/*Generated by MPS */
class MpspluginApplicationPlugin : BaseApplicationPlugin() {
    private val myId: PluginId = PluginId.getId("org.modelix.model.mpsplugin")
    public override fun getId(): PluginId {
        return myId
    }

    override fun createGroups() {
        // actions w/o parameters
        addAction(AddBranchAction())
        addAction(AddModelNodeAction())
        addAction(AddModelServerAction())
        addAction(AddModuleNodeAction())
        addAction(AddProjectBindingAction())
        addAction(AddProjectNodeAction())
        addAction(AddRepositoryAction())
        addAction(AddTransientModuleBindingAction())
        addAction(CheckoutAndSyncModuleAction())
        addAction(CheckoutModuleAction())
        addAction(DeleteModuleAction())
        addAction(DeleteProjectAction())
        addAction(GetCloudRepositorySizeAction())
        addAction(LoadHistoryForBranchAction())
        addAction(LoadHistoryForRepositoryAction())
        addAction(NavigateToMpsNodeAction())
        addAction(ReconnectAction())
        addAction(RemoveModelServerAction())
        addAction(RemoveRepositoryAction())
        addAction(RemoveTransientModuleBindingAction())
        addAction(ShowAuthenticationInfoAction())
        addAction(ShowPropertiesAction())
        addAction(ShowReferencesAction())
        addAction(StoreAllModulesAction())
        addAction(SwitchBranchAction())
        addAction(UnbindAction())
        // groups
        addGroup(CloudActionsForPhysicalModulesCloudActionsActionGroup(this))
        addGroup(CloudActionsForPhysicalModulesActionGroup(this))
        addGroup(CloudActionsForPhysicalProjectsCloudActionsActionGroup(this))
        addGroup(CloudActionsForPhysicalProjectsActionGroup(this))
        addGroup(CloudBindingGroupActionGroup(this))
        addGroup(CloudBranchGroupActionGroup(this))
        addGroup(CloudNodeGroupAddChildActionGroup(this))
        addGroup(CloudNodeGroupSetPropertyActionGroup(this))
        addGroup(CloudNodeGroupActionGroup(this))
        addGroup(CloudRootGroupActionGroup(this))
        addGroup(ModelServerGroupActionGroup(this))
        addGroup(RepositoryGroupActionGroup(this))
    }

    override fun adjustRegularGroups() {
        insertGroupIntoAnother(
            CloudActionsForPhysicalProjectsActionGroup.Companion.ID,
            ProjectActions_ActionGroup.ID,
            ProjectActions_ActionGroup.LABEL_ID_projectNew,
        )
        insertGroupIntoAnother(
            CloudActionsForPhysicalModulesActionGroup.Companion.ID,
            SolutionActions_ActionGroup.ID,
            SolutionActions_ActionGroup.LABEL_ID_contents,
        )
    }

    public override fun fillCustomParts(parts: MutableList<ApplicationPluginPart>) {
        parts.add(ApplicationPluginAppPluginPart())
    }
}
