package org.modelix.model.mpsplugin.plugin

import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory
import org.apache.log4j.Level
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import org.jetbrains.mps.openapi.language.SConcept
import org.modelix.model.api.ILanguageRepository.Companion.register
import org.modelix.model.api.ILanguageRepository.Companion.unregister
import org.modelix.model.api.INodeReferenceSerializer.Companion.register
import org.modelix.model.api.INodeReferenceSerializer.Companion.unregister
import org.modelix.model.metameta.MetaMetaLanguage.concept_ChildLink
import org.modelix.model.metameta.MetaMetaLanguage.concept_Concept
import org.modelix.model.metameta.MetaMetaLanguage.concept_Language
import org.modelix.model.metameta.MetaMetaLanguage.concept_Property
import org.modelix.model.metameta.MetaMetaLanguage.concept_ReferenceLink
import org.modelix.model.mpsadapters.mps.BootstrapConceptMappings
import kotlin.jvm.functions.Function0.invoke
import kotlin.jvm.functions.Function1.invoke

/*Generated by MPS */
object MetaMetaModelMappings {
    private val LOG: Logger = LogManager.getLogger(MetaMetaModelMappings::class.java)
    fun register() {
        try {
            BootstrapConceptMappings.Companion.INSTANCE.register(concept_Language, CONCEPTS.`Language$L1`)
            BootstrapConceptMappings.Companion.INSTANCE.register(concept_Concept, CONCEPTS.`Concept$Lw`)
            BootstrapConceptMappings.Companion.INSTANCE.register(concept_Property, CONCEPTS.`Property$LZ`)
            BootstrapConceptMappings.Companion.INSTANCE.register(concept_ChildLink, CONCEPTS.`ContainmentLink$X8`)
            BootstrapConceptMappings.Companion.INSTANCE.register(concept_ReferenceLink, CONCEPTS.`ReferenceLink$WD`)
        } catch (ex: Exception) {
            if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("", ex)
            }
        }
    }

    fun unregister() {
        try {
            BootstrapConceptMappings.Companion.INSTANCE.unregister(concept_Language, CONCEPTS.`Language$L1`)
            BootstrapConceptMappings.Companion.INSTANCE.unregister(concept_Concept, CONCEPTS.`Concept$Lw`)
            BootstrapConceptMappings.Companion.INSTANCE.unregister(concept_Property, CONCEPTS.`Property$LZ`)
            BootstrapConceptMappings.Companion.INSTANCE.unregister(concept_ChildLink, CONCEPTS.`ContainmentLink$X8`)
            BootstrapConceptMappings.Companion.INSTANCE.unregister(concept_ReferenceLink, CONCEPTS.`ReferenceLink$WD`)
        } catch (ex: Exception) {
            if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("", ex)
            }
        }
    }

    private object CONCEPTS {
        /*package*/
        val `Language$L1`: SConcept = MetaAdapterFactory.getConcept(
            -0x40020edcf284b8e5L,
            -0x5ad405c2c5fdb99cL,
            0x100c617ef3bce7efL,
            "org.modelix.model.metametamodel.structure.Language"
        )

        /*package*/
        val `Concept$Lw`: SConcept = MetaAdapterFactory.getConcept(
            -0x40020edcf284b8e5L,
            -0x5ad405c2c5fdb99cL,
            0x100c617ef3bce7f0L,
            "org.modelix.model.metametamodel.structure.Concept"
        )

        /*package*/
        val `Property$LZ`: SConcept = MetaAdapterFactory.getConcept(
            -0x40020edcf284b8e5L,
            -0x5ad405c2c5fdb99cL,
            0x100c617ef3bce7f1L,
            "org.modelix.model.metametamodel.structure.Property"
        )

        /*package*/
        val `ContainmentLink$X8`: SConcept = MetaAdapterFactory.getConcept(
            -0x40020edcf284b8e5L,
            -0x5ad405c2c5fdb99cL,
            0x100c617ef3bce7f3L,
            "org.modelix.model.metametamodel.structure.ContainmentLink"
        )

        /*package*/
        val `ReferenceLink$WD`: SConcept = MetaAdapterFactory.getConcept(
            -0x40020edcf284b8e5L,
            -0x5ad405c2c5fdb99cL,
            0x100c617ef3bce7f2L,
            "org.modelix.model.metametamodel.structure.ReferenceLink"
        )
    }
}
