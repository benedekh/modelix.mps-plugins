package org.modelix.model.mpsplugin.history

import javax.swing.tree.TreeNode

/*Generated by MPS */
object TreeNodeClassification {
    fun isRootNode(_this: TreeNode?): Boolean {
        val nodeTreeNode: CloudNodeTreeNode? = as_k32uer_a0a0a1(_this, CloudNodeTreeNode::class.java)
        if (nodeTreeNode == null) {
            return false
        } else {
            return CloudNodeTreeNodeClassification.isCloudNodeRootNode(nodeTreeNode)
        }
    }

    fun isProperNode(_this: TreeNode?): Boolean {
        val nodeTreeNode: CloudNodeTreeNode? = as_k32uer_a0a0a2(_this, CloudNodeTreeNode::class.java)
        return nodeTreeNode != null
    }

    fun isModuleNode(_this: TreeNode?): Boolean {
        val nodeTreeNode: CloudNodeTreeNode? = as_k32uer_a0a0a3(_this, CloudNodeTreeNode::class.java)
        if (nodeTreeNode == null) {
            return false
        } else {
            return CloudNodeTreeNodeClassification.isCloudNodeModuleNode(nodeTreeNode)
        }
    }

    fun isProjectNode(_this: TreeNode?): Boolean {
        val nodeTreeNode: CloudNodeTreeNode? = as_k32uer_a0a0a4(_this, CloudNodeTreeNode::class.java)
        if (nodeTreeNode == null) {
            return false
        } else {
            return CloudNodeTreeNodeClassification.isCloudNodeAProjectNode(nodeTreeNode)
        }
    }

    private fun <T> as_k32uer_a0a0a1(o: Any?, type: Class<T>): T? {
        return (if (type.isInstance(o)) o as T? else null)
    }

    private fun <T> as_k32uer_a0a0a2(o: Any?, type: Class<T>): T? {
        return (if (type.isInstance(o)) o as T? else null)
    }

    private fun <T> as_k32uer_a0a0a3(o: Any?, type: Class<T>): T? {
        return (if (type.isInstance(o)) o as T? else null)
    }

    private fun <T> as_k32uer_a0a0a4(o: Any?, type: Class<T>): T? {
        return (if (type.isInstance(o)) o as T? else null)
    }
}
