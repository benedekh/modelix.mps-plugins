package org.modelix.model.mpsplugin.plugin

import jetbrains.mps.ide.project.ProjectHelper
import jetbrains.mps.plugins.part.ProjectPluginPart
import jetbrains.mps.project.MPSProject
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import org.modelix.model.mpsplugin.projectview.CloudProjectViewExtension

/*Generated by MPS */
class ProjectPlugin_ProjectPluginPart : ProjectPluginPart() {
    override fun init(project: MPSProject) {
        val executionMode: EModelixExecutionMode = ModelixConfigurationSystemProperties.executionMode
        if (executionMode == EModelixExecutionMode.MODEL_EXPORT) {
            return
        }
        CloudProjectViewExtension.Companion.getInstance(project).init()
        if (ModelixConfigurationSystemProperties.shouldLoadPersistentBinding()) {
            if (LOG.isDebugEnabled) {
                LOG.debug("APPLYING PROJECT PLUGIN - PERSISTED BINDING CONFIGURATION. Loading persisted binding is enabled")
            }
            PersistedBindingConfiguration.Companion.getInstance(ProjectHelper.toIdeaProject(project))!!
                .applyToProject()
        } else {
            if (LOG.isDebugEnabled) {
                LOG.debug("APPLYING PROJECT PLUGIN - PERSISTED BINDING CONFIGURATION. Loading persisted binding disabled, skipping")
            }
        }
    }

    override fun dispose(project: MPSProject) {
        val executionMode: EModelixExecutionMode = ModelixConfigurationSystemProperties.executionMode
        if (executionMode == EModelixExecutionMode.MODEL_EXPORT) {
            return
        }
        CloudProjectViewExtension.Companion.getInstance(project).dispose()
        PersistedBindingConfiguration.Companion.disposeInstance(ProjectHelper.toIdeaProject(project))
    }

    companion object {
        private val LOG: Logger = LogManager.getLogger(ProjectPlugin_ProjectPluginPart::class.java)
    }
}
