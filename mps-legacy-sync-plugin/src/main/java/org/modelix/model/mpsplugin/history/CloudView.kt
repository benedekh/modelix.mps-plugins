package org.modelix.model.mpsplugin.history

import com.intellij.openapi.actionSystem.ActionGroup
import com.intellij.openapi.actionSystem.ActionManager
import com.intellij.openapi.actionSystem.DataProvider
import jetbrains.mps.ide.actions.MPSCommonDataKeys
import jetbrains.mps.ide.ui.tree.MPSTree
import jetbrains.mps.ide.ui.tree.MPSTreeNode
import jetbrains.mps.ide.ui.tree.TextTreeNode
import org.jetbrains.annotations.NonNls
import java.awt.BorderLayout
import javax.swing.BorderFactory
import javax.swing.JPanel
import javax.swing.JScrollPane
import javax.swing.tree.TreeNode
import javax.swing.tree.TreePath

/*Generated by MPS */
class CloudView : JPanel(BorderLayout()) {
    private val tree: MPSTree = CloudViewTree()

    init {
        val scrollPane: JScrollPane = JScrollPane(tree)
        scrollPane.setBorder(BorderFactory.createEmptyBorder())
        add(scrollPane, BorderLayout.CENTER)
        tree.rebuildLater()
    }

    class CloudViewTree : MPSTree(), DataProvider {
        public override fun runRebuildAction(rebuildAction: Runnable, saveExpansion: Boolean) {
            super.runRebuildAction(rebuildAction, saveExpansion)
        }

        override fun rebuild(): MPSTreeNode {
            val root: TextTreeNode = TextTreeNode("Loading ...")
            root.add(CloudRootTreeNode())
            setRootVisible(false)
            return root
        }

        override fun createPopupActionGroup(node: MPSTreeNode): ActionGroup? {
            if (node is CloudRootTreeNode) {
                return ActionManager.getInstance()
                    .getAction("org.modelix.model.mpsplugin.plugin.CloudRootGroup_ActionGroup") as ActionGroup
            }
            if (node is ModelServerTreeNode) {
                return ActionManager.getInstance()
                    .getAction("org.modelix.model.mpsplugin.plugin.ModelServerGroup_ActionGroup") as ActionGroup
            }
            if (node is CloudNodeTreeNode) {
                return ActionManager.getInstance()
                    .getAction("org.modelix.model.mpsplugin.plugin.CloudNodeGroup_ActionGroup") as ActionGroup
            }
            if (node is RepositoryTreeNode) {
                return ActionManager.getInstance()
                    .getAction("org.modelix.model.mpsplugin.plugin.RepositoryGroup_ActionGroup") as ActionGroup
            }
            if (node is CloudBranchTreeNode) {
                return ActionManager.getInstance()
                    .getAction("org.modelix.model.mpsplugin.plugin.CloudBranchGroup_ActionGroup") as ActionGroup
            }
            if (node is CloudBindingTreeNode) {
                return ActionManager.getInstance()
                    .getAction("org.modelix.model.mpsplugin.plugin.CloudBindingGroup_ActionGroup") as ActionGroup
            }
            return null
        }

        private fun <T : TreeNode?> getSelectedTreeNode(nodeClass: Class<T>): T? {
            val selectionPath: TreePath? = selectionPath
            if (selectionPath == null) {
                return null
            }
            val selectedNode: Any = selectionPath.lastPathComponent
            return (if (nodeClass.isInstance(selectedNode)) nodeClass.cast(selectedNode) else null)
        }

        override fun getData(dataId: @NonNls String): Any? {
            if (MPSCommonDataKeys.TREE_NODE.`is`(dataId)) {
                return getSelectedTreeNode(TreeNode::class.java)
            }
            return null
        }
    }
}
