package org.modelix.model.mpsplugin

import jetbrains.mps.internal.collections.runtime.ListSequence
import jetbrains.mps.internal.collections.runtime.Sequence
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPointerOperations
import jetbrains.mps.smodel.MPSModuleRepository
import org.jetbrains.mps.openapi.model.SModel
import org.jetbrains.mps.openapi.model.SModelReference
import org.jetbrains.mps.openapi.model.SNode
import org.jetbrains.mps.openapi.model.SNodeId
import org.jetbrains.mps.openapi.model.SNodeReference
import org.jetbrains.mps.openapi.module.SModule
import org.jetbrains.mps.openapi.module.SRepository
import org.modelix.model.api.INode
import org.modelix.model.api.INodeReference
import org.modelix.model.api.PNodeAdapter.Companion.wrap
import org.modelix.model.area.IArea
import org.modelix.model.lazy.INodeReferenceSerializer
import org.modelix.model.mpsadapters.mps.SNodeToNodeAdapter
import java.util.Objects

/*Generated by MPS */
class ForeignNodeReference(val modelName: String, val foreignId: String) : INodeReference {

    public override fun resolveNode(area: IArea?): INode? {
        val repo: MPSModuleRepository = MPSModuleRepository.getInstance()
        return SNodeToNodeAdapter.Companion.wrap(check_e0to5m_a0b0k(getReference(repo), repo, this))
    }

    private inner class SimpleSNodeReference(
        private val sModelReference: SModelReference?,
        private val sNodeId: SNodeId,
    ) : SNodeReference {
        public override fun resolve(repository: SRepository): SNode? {
            val model: SModel = SPointerOperations.resolveModel(getModelReference(), repository)
            return model.getNode(getNodeId())
        }

        public override fun getModelReference(): SModelReference? {
            return sModelReference
        }

        public override fun getNodeId(): SNodeId? {
            return sNodeId
        }
    }

    fun getReference(repository: SRepository?): SNodeReference {
        if (repository == null) {
            throw IllegalArgumentException("repository should not be null")
        }
        var sModelReference: SModelReference? = null
        for (module: SModule? in Sequence.fromIterable<SModule>(repository.getModules())) {
            for (itModel: SModel? in ListSequence.fromList<SModel?>(SModuleUtils.getModelsWithoutDescriptor(module))) {
                if (Objects.equals(itModel!!.getModelName(), modelName)) {
                    sModelReference = itModel.getReference()
                }
            }
        }
        val sNodeId: SNodeId = jetbrains.mps.smodel.SNodeId.Foreign("~" + foreignId)
        return SimpleSNodeReference(sModelReference, sNodeId)
    }

    class ForeignNodeReferenceSerializer() : INodeReferenceSerializer {
        public override fun serialize(nr: INodeReference): String? {
            if (nr is ForeignNodeReference) {
                val fnr: ForeignNodeReference = nr
                return "->" + fnr.modelName + ":" + fnr.foreignId
            } else {
                return null
            }
        }

        public override fun deserialize(refValueAsString: String): INodeReference? {
            if (refValueAsString.startsWith("->")) {
                val res: String = refValueAsString.substring("->".length)
                val modelName: String = res.split(":".toRegex()).dropLastWhile({ it.isEmpty() }).toTypedArray().get(0)
                val foreignId: String = res.split(":".toRegex()).dropLastWhile({ it.isEmpty() }).toTypedArray().get(1)
                val refValue: INodeReference = ForeignNodeReference(modelName, foreignId)
                return refValue
            } else {
                return null
            }
        }
    }

    companion object {
        private fun check_e0to5m_a0b0k(
            checkedDotOperand: SNodeReference?,
            repo: MPSModuleRepository,
            checkedDotThisExpression: ForeignNodeReference,
        ): SNode? {
            if (null != checkedDotOperand) {
                return checkedDotOperand.resolve(repo)
            }
            return null
        }
    }
}
