package org.modelix.model.mpsplugin

import org.modelix.model.api.IBranch
import org.modelix.model.api.IBranchListener
import org.modelix.model.api.ITree
import org.modelix.model.api.ITreeChangeVisitor
import org.modelix.model.api.IWriteTransaction
import org.modelix.model.lazy.RepositoryId
import java.util.Objects

/*Generated by MPS */
/**
 * Just a parent for all actual bindings
 */
class RootBinding(override val cloudRepository: ICloudRepository) : Binding(null), IBranchListener {
    val syncQueue: SyncQueue = SyncQueue(this)
    private var disposed: Boolean = false

    init {
        activate(null)
    }

    constructor(connection: ModelServerConnection?, cloudRepositoryId: RepositoryId?) : this(
        CloudRepository(
            connection,
            cloudRepositoryId,
        ),
    )

    override fun toString(): String {
        return "bindings"
    }

    override val branch: IBranch
        get() {
            val branch: IBranch? = super.branch
            return (if (branch != null) branch else cloudRepository.branch)
        }

    override fun treeChanged(oldTree: ITree?, newTree: ITree) {
        if (syncQueue.isSynchronizing) {
            return
        }
        enqueueSync(SyncDirection.TO_MPS, false, null)
    }

    override fun doSyncToMPS(newTree: ITree) {
        assertSyncThread()
        val oldTree: ITree? = syncQueue.lastTreeAfterSync
        if (oldTree != null && !(Objects.equals(newTree, oldTree))) {
            val visitors = allBindings.mapNotNull { it.getTreeChangeVisitor(oldTree, newTree) }
            if (visitors.isNotEmpty()) {
                newTree.visitChanges(oldTree, TreeChangeMulticaster(visitors))
            }
        }
    }

    override fun doSyncToCloud(t: IWriteTransaction) {}
    override fun getTreeChangeVisitor(oldTree: ITree?, newTree: ITree): ITreeChangeVisitor? {
        return null
    }

    override fun doActivate() {
        if (disposed) {
            throw IllegalStateException("Reactivation not supported")
        }
        cloudRepository.activeBranch!!.addListener(this)
    }

    override fun doDeactivate() {
        disposed = true
        cloudRepository.activeBranch!!.removeListener(this)
        syncQueue.dispose()
    }
}
