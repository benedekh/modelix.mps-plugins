package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.ui.Messages
import jetbrains.mps.ide.actions.MPSCommonDataKeys
import jetbrains.mps.internal.collections.runtime.IWhereFilter
import jetbrains.mps.internal.collections.runtime.ListSequence
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory
import jetbrains.mps.workbench.action.BaseAction
import org.jetbrains.mps.openapi.model.SNode
import org.modelix.model.api.addNewChild
import org.modelix.model.area.PArea
import org.modelix.model.mpsadapters.mps.SNodeAPI
import org.modelix.model.mpsplugin.history.CloudBranchTreeNode
import org.modelix.model.mpsplugin.history.RepositoryTreeNode
import javax.swing.Icon

/*Generated by MPS */
class AddBranch_Action : BaseAction("New Branch", "", ICON) {
    init {
        setIsAlwaysVisible(false)
        setExecuteOutsideCommand(true)
    }

    override fun isDumbAware(): Boolean {
        return true
    }

    override fun collectActionData(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!super.collectActionData(event, _params)) {
            return false
        }
        run {
            val p = event.getData(CommonDataKeys.PROJECT) ?: return false
        }
        run {
            val p = event.getData(MPSCommonDataKeys.TREE_NODE) ?: return false
        }
        return true
    }

    public override fun doExecute(event: AnActionEvent, _params: Map<String, Any>) {
        val name = Messages.showInputDialog(event.getData(CommonDataKeys.PROJECT), "Name", "Add Branch", null)
        if (name == null || name.length == 0) {
            return
        }
        val branchTreeNode = event.getData(MPSCommonDataKeys.TREE_NODE) as CloudBranchTreeNode?
        val treeTreeNode = branchTreeNode!!.getAncestor(RepositoryTreeNode::class.java)
        val repositoryId = treeTreeNode.repositoryId
        val modelServer = treeTreeNode.modelServer
        val infoBranch = modelServer!!.infoBranch
        PArea(infoBranch!!).executeWrite<Unit> {
            val treeInfo = treeTreeNode.repositoryInfo!!
            if (ListSequence.fromList<SNode>(SLinkOperations.getChildren(treeInfo, LINKS.`branches$b5_g`))
                    .any(object : IWhereFilter<SNode?>() {
                        override fun accept(it: SNode?): Boolean {
                            return SPropertyOperations.getString(it, PROPS.`name$MnvL`) == name
                        }
                    })
            ) {
                Messages.showErrorDialog(
                    event.getData(CommonDataKeys.PROJECT),
                    "Branch '$name' already exists",
                    "Add Branch",
                )
                return@executeWrite Unit
            }
            val versionHash = modelServer!!.getClient()[
                repositoryId!!.getBranchKey(
                    SPropertyOperations.getString(
                        branchTreeNode.branchInfo,
                        PROPS.`name$MnvL`,
                    ),
                ),
            ]
            modelServer.getClient().put(repositoryId.getBranchKey(name), versionHash)
            val branchInfo =
                SNodeOperations.cast(SNodeAPI.addNewChild(treeInfo, LINKS.`branches$b5_g`), CONCEPTS.`BranchInfo$6t`)
            SPropertyOperations.assign(branchInfo, PROPS.`name$MnvL`, name)
            Unit
        }
    }

    private object LINKS {
        /*package*/
        val `branches$b5_g` = MetaAdapterFactory.getContainmentLink(
            -0x4967f1420fe2ba63L,
            -0x56adc78bf09cec4cL,
            0x62b7d9b07cecbcc0L,
            0x62b7d9b07cecbcc4L,
            "branches",
        )
    }

    private object PROPS {
        /*package*/
        val `name$MnvL` = MetaAdapterFactory.getProperty(
            -0x3154ae6ada15b0deL,
            -0x646defc46a3573f4L,
            0x110396eaaa4L,
            0x110396ec041L,
            "name",
        )
    }

    private object CONCEPTS {
        /*package*/
        val `BranchInfo$6t` = MetaAdapterFactory.getConcept(
            -0x4967f1420fe2ba63L,
            -0x56adc78bf09cec4cL,
            0x62b7d9b07cecbcc1L,
            "org.modelix.model.runtimelang.structure.BranchInfo",
        )
    }

    companion object {
        private val ICON: Icon? = null
    }
}
