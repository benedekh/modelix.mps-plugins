package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.project.Project
import com.intellij.openapi.wm.ToolWindow
import com.intellij.openapi.wm.ToolWindowFactory
import com.intellij.openapi.wm.ToolWindowManager
import com.intellij.ui.content.ContentFactory
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes._return_P0_E0
import org.modelix.model.lazy.CLVersion
import org.modelix.model.lazy.RepositoryId
import org.modelix.model.mpsplugin.ModelServerConnection
import org.modelix.model.mpsplugin.history.HistoryView
import javax.swing.Icon

/*Generated by MPS */
class CloudHistoryTool_Tool() : ToolWindowFactory {
    private var component: HistoryView? = null
    private var toolWindow: ToolWindow? = null
    public override fun createToolWindowContent(project: Project, toolWindow: ToolWindow) {
        this.toolWindow = toolWindow
        component = HistoryView()
        toolWindow.getContentManager()
            .addContent(ContentFactory.SERVICE.getInstance().createContent(component, "Modelix Server", false))
    }

    companion object {
        private val ICON: Icon? = IconContainer.ICON_a0_0
        fun getToolWindow(project: Project?): ToolWindow? {
            return ToolWindowManager.getInstance((project)!!).getToolWindow("Modelix History")
        }

        fun getInstance(project: Project?): HistoryView {
            return getToolWindow(project)!!.getContentManager().getContent(0)!!.getComponent() as HistoryView
        }

        fun load(
            project: Project?,
            modelServer: ModelServerConnection?,
            repositoryId: RepositoryId?,
            headVersion: _return_P0_E0<out CLVersion?>?,
        ) {
            getInstance(project).loadHistory(modelServer, repositoryId, headVersion)
            getToolWindow(project)!!.show()
        }
    }
}
