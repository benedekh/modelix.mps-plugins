@file:Suppress("UnstableApiUsage")

package org.modelix.model.mpsplugin

import com.intellij.openapi.command.CommandProcessor
import com.intellij.openapi.editor.Document
import com.intellij.openapi.project.Project
import jetbrains.mps.extapi.model.TransientSModel
import jetbrains.mps.ide.project.ProjectHelper
import jetbrains.mps.ide.undo.MPSUndoUtil
import jetbrains.mps.smodel.EditableModelDescriptor
import jetbrains.mps.smodel.ModelLoadResult
import jetbrains.mps.smodel.SModel
import jetbrains.mps.smodel.SNodeUndoableAction
import jetbrains.mps.smodel.loading.ModelLoadingState
import org.apache.log4j.Level
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import org.jetbrains.mps.openapi.model.EditableSModel
import org.jetbrains.mps.openapi.model.SModelId
import org.jetbrains.mps.openapi.model.SModelReference
import org.jetbrains.mps.openapi.model.SNode
import org.jetbrains.mps.openapi.module.SModuleReference
import org.jetbrains.mps.openapi.module.SRepository
import org.jetbrains.mps.openapi.persistence.NullDataSource
import org.jetbrains.mps.openapi.persistence.PersistenceFacade
import org.modelix.model.util.pmap.CustomPMap
import org.modelix.model.util.pmap.SmallPMap.Companion.empty

/*Generated by MPS */
class CloudTransientModel(module: CloudTransientModule?, name: String?, modelId: SModelId?, modelNodeId: Long) :
    EditableModelDescriptor(
        createModelRef(name, module!!.moduleReference, modelId),
        NullDataSource(),
    ),
    EditableSModel,
    IUserObjectContainer,
    TransientSModel {
    private var userObjects: CustomPMap<Any, Any?> = empty()
    fun dispose() {}
    override fun <T> getUserObject(key: UserObjectKey<T>): T {
        return userObjects.get(key) as T
    }

    override fun <T> putUserObject(key: UserObjectKey<T>, value: T) {
        userObjects = userObjects.put(key, value) ?: empty()
    }

    override fun updateTimestamp() {}
    override fun needsReloading(): Boolean {
        return false
    }

    override fun createModel(): ModelLoadResult<SModel> {
        val smodel: SModel = object : SModel(reference) {
            override fun performUndoableAction(action: SNodeUndoableAction) {
                try {
                    val project: Project? = CommandProcessor.getInstance().currentCommandProject
                    if (project == null) {
                        return
                    }
                    val repository: SRepository? = ProjectHelper.getProjectRepository(project)
                    if (repository == null) {
                        return
                    }
                    val affectedNode: SNode? = action.affectedNode
                    if (affectedNode == null) {
                        return
                    }
                    val rootNode: SNode = affectedNode.containingRoot
                    val doc: Document = MPSUndoUtil.getDoc(repository, rootNode.reference)
                    MpsReplicatedRepository.Companion.documentChanged(MPSUndoUtil.getRefForDoc(doc))
                } catch (ex: Exception) {
                    if (LOG.isEnabledFor(Level.ERROR)) {
                        LOG.error("", ex)
                    }
                }
            }
        }
        return ModelLoadResult(smodel, ModelLoadingState.FULLY_LOADED)
    }

    override fun isChanged(): Boolean {
        return false
    }

    override fun save() {}
    override fun rename(newModelName: String, changeFile: Boolean) {
        throw UnsupportedOperationException()
    }

    override fun isReadOnly(): Boolean {
        return false
    }

    override fun reloadFromSource() {
        throw UnsupportedOperationException()
    }

    companion object {
        private val LOG: Logger = LogManager.getLogger(CloudTransientModel::class.java)
        private fun createModelRef(
            modelName: String?,
            moduleReference: SModuleReference,
            modelId: SModelId?,
        ): SModelReference {
            return PersistenceFacade.getInstance().createModelReference(moduleReference, (modelId)!!, (modelName)!!)
        }
    }
}
