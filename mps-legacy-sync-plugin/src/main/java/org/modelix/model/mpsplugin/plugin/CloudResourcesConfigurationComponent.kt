package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.components.PersistentStateComponent
import com.intellij.openapi.components.RoamingType
import com.intellij.openapi.components.Service
import com.intellij.openapi.components.State
import com.intellij.openapi.components.Storage
import java.util.Objects

/*Generated by MPS */
/**
 * This component handles the storage of the cloud configuration.
 * For information about component persistence refer to https://jetbrains.org/intellij/sdk/docs/basics/persisting_state_of_components.html
 */
@Service
@State(
    name = "CloudResources",
    storages = [Storage(file = "cloudResources.xml", value = "cloudResources.xml", roamingType = RoamingType.DISABLED)],
    reloadable = true,
)
class CloudResourcesConfigurationComponent : PersistentStateComponent<CloudResourcesConfigurationComponent.State> {
    /*package*/
    class State {
        var modelServers: MutableSet<String?>
        var transientProjects: MutableSet<String?>
        var transientModules: MutableSet<String?>
        var mappedModules: MutableSet<String?>

        /*package*/
        init {
            modelServers = LinkedHashSet()
            transientModules = LinkedHashSet()
            transientProjects = LinkedHashSet()
            mappedModules = LinkedHashSet()
        }

        override fun hashCode(): Int {
            var hc: Int = 1
            hc += 3 * modelServers.hashCode()
            hc += 7 * transientProjects.hashCode()
            hc += 11 * transientModules.hashCode()
            hc += 13 * mappedModules.hashCode()
            return hc
        }

        override fun equals(obj: Any?): Boolean {
            if (obj is State) {
                val other: State = obj
                if (!(Objects.equals(transientProjects, other.transientProjects))) {
                    return false
                }
                if (!(Objects.equals(modelServers, other.modelServers))) {
                    return false
                }
                if (!(Objects.equals(transientModules, other.transientModules))) {
                    return false
                }
                if (!(Objects.equals(mappedModules, other.mappedModules))) {
                    return false
                }
                return true
            } else {
                return false
            }
        }

        override fun toString(): String {
            return "State(cloudRepositories: " + modelServers + ", transientProjects: " + transientProjects + ", transientModules: " + transientModules + ", mappedModules: " + mappedModules + ")"
        }
    }

    private var state: State = State()
    override fun getState(): State {
        return state
    }

    override fun loadState(state: State) {
        this.state = state
    }
}
