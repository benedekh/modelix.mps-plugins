package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import jetbrains.mps.ide.actions.MPSCommonDataKeys
import jetbrains.mps.workbench.action.ActionAccess
import jetbrains.mps.workbench.action.BaseAction
import org.modelix.model.api.IBranch
import org.modelix.model.api.ITree
import org.modelix.model.client.ActiveBranch
import org.modelix.model.lazy.CLTree
import org.modelix.model.lazy.unwrap
import org.modelix.model.mpsplugin.history.RepositoryTreeNode
import javax.swing.Icon
import javax.swing.tree.TreeNode

/*Generated by MPS */
class GetCloudRepositorySizeAction : BaseAction("Get Number of Nodes", "", ICON) {
    init {
        setIsAlwaysVisible(false)
        actionAccess = ActionAccess.UNDO_PROJECT
    }

    override fun isDumbAware(): Boolean {
        return true
    }

    override fun collectActionData(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!(super.collectActionData(event, _params))) {
            return false
        }
        run({
            val p: Project? = event.getData(CommonDataKeys.PROJECT)
            if (p == null) {
                return false
            }
        })
        run({
            val p: TreeNode? = event.getData(MPSCommonDataKeys.TREE_NODE)
            if (p == null) {
                return false
            }
        })
        return true
    }

    public override fun doExecute(event: AnActionEvent, _params: Map<String, Any>) {
        val treeNode: RepositoryTreeNode = (event.getData(MPSCommonDataKeys.TREE_NODE) as RepositoryTreeNode?)!!
        val activeBranch: ActiveBranch = treeNode.modelServer.getActiveBranch(treeNode.repositoryId)
        val branch: IBranch = activeBranch.branch
        val size: Long = branch.computeRead({
            val tree: ITree = branch.transaction.tree.unwrap()
            if (tree is CLTree) {
                return@computeRead tree.getSize()
            }
            0L
        })
        Messages.showInfoMessage(event.getData(CommonDataKeys.PROJECT), "Size is " + size, "Size of Repository")
    }

    companion object {
        private val ICON: Icon? = null
    }
}
