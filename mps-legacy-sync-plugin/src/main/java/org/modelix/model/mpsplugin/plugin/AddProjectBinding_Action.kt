package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.ui.Messages
import jetbrains.mps.ide.actions.MPSCommonDataKeys
import jetbrains.mps.project.MPSProject
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory
import jetbrains.mps.workbench.action.BaseAction
import org.jetbrains.mps.openapi.language.SProperty
import org.modelix.model.api.PNodeAdapter
import org.modelix.model.area.PArea
import org.modelix.model.lazy.RepositoryId
import org.modelix.model.mpsplugin.CloudRepository
import org.modelix.model.mpsplugin.ModelCloudImportUtils
import org.modelix.model.mpsplugin.ModelServerConnection
import org.modelix.model.mpsplugin.SyncDirection
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode
import org.modelix.model.mpsplugin.history.ModelServerTreeNode
import org.modelix.model.mpsplugin.history.RepositoryTreeNode
import org.modelix.model.mpsplugin.history.TreeNodeClassification
import java.util.Objects
import javax.swing.Icon
import javax.swing.tree.TreeNode

/*Generated by MPS */
class AddProjectBinding_Action() : BaseAction("Bind to Current Project", "", ICON) {
    init {
        setIsAlwaysVisible(false)
        setExecuteOutsideCommand(true)
    }

    public override fun isDumbAware(): Boolean {
        return true
    }

    public override fun isApplicable(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!(TreeNodeClassification.isProjectNode(event.getData(MPSCommonDataKeys.TREE_NODE)))) {
            return false
        }
        val nodeTreeNode: CloudNodeTreeNode =
            ((as_8zbn8k_a0a1a4(event.getData(MPSCommonDataKeys.TREE_NODE), CloudNodeTreeNode::class.java))!!)
        val nodeId: Long = (nodeTreeNode.node as PNodeAdapter?)!!.nodeId
        val repositoryId: RepositoryId? = nodeTreeNode.getAncestor(RepositoryTreeNode::class.java).repositoryId
        return nodeTreeNode.modelServer?.hasProjectBinding(repositoryId, nodeId) == false
    }

    public override fun doUpdate(event: AnActionEvent, _params: Map<String, Any>) {
        setEnabledState(event.getPresentation(), isApplicable(event, _params))
    }

    override fun collectActionData(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!(super.collectActionData(event, _params))) {
            return false
        }
        run({
            val p: MPSProject? = event.getData(MPSCommonDataKeys.MPS_PROJECT)
            if (p == null) {
                return false
            }
        })
        run({
            val p: TreeNode? = event.getData(MPSCommonDataKeys.TREE_NODE)
            if (p == null) {
                return false
            }
        })
        return true
    }

    public override fun doExecute(event: AnActionEvent, _params: Map<String, Any>) {
        val nodeTreeNode: CloudNodeTreeNode = (event.getData(MPSCommonDataKeys.TREE_NODE) as CloudNodeTreeNode?)!!
        val expectedProjectName: String? = PArea(nodeTreeNode.branch).executeRead({
            nodeTreeNode.node.getPropertyValue(
                PROPS.`name$MnvL`.getName(),
            )
        })
        if (!(Objects.equals(expectedProjectName, event.getData(MPSCommonDataKeys.MPS_PROJECT)!!.getName()))) {
            val dialogResult: Int = Messages.showOkCancelDialog(
                event.getData(MPSCommonDataKeys.MPS_PROJECT)!!
                    .getProject(),
                "Project names don't match. Do you want to bind '" + expectedProjectName + "' to '" + event.getData(
                    MPSCommonDataKeys.MPS_PROJECT,
                )!!
                    .getName() + "'?",
                "Bind Project",
                null,
            )
            if (dialogResult != Messages.OK) {
                return
            }
        }
        val modelServer: ModelServerConnection? =
            nodeTreeNode!!.getAncestor(ModelServerTreeNode::class.java).modelServer
        val repositoryId: RepositoryId? = nodeTreeNode.getAncestor(RepositoryTreeNode::class.java).repositoryId
        val treeInRepository: CloudRepository = CloudRepository(modelServer, repositoryId)
        val cloudProjectId: Long = (nodeTreeNode.node as PNodeAdapter?)!!.nodeId
        ModelCloudImportUtils.bindCloudProjectToMpsProject(
            treeInRepository,
            cloudProjectId,
            event.getData(MPSCommonDataKeys.MPS_PROJECT)!!,
            SyncDirection.TO_MPS,
        )
    }

    private object PROPS {
        /*package*/
        val `name$MnvL`: SProperty = MetaAdapterFactory.getProperty(
            -0x3154ae6ada15b0deL,
            -0x646defc46a3573f4L,
            0x110396eaaa4L,
            0x110396ec041L,
            "name",
        )
    }

    companion object {
        private val ICON: Icon? = null
        private fun <T> as_8zbn8k_a0a1a4(o: Any?, type: Class<T>): T? {
            return (if (type.isInstance(o)) o as T? else null)
        }
    }
}
