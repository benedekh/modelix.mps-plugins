package org.modelix.model.mpsplugin

import jetbrains.mps.extapi.module.TransientSModule
import jetbrains.mps.project.AbstractModule
import jetbrains.mps.project.ModuleId
import jetbrains.mps.project.structure.modules.ModuleDescriptor
import jetbrains.mps.vfs.IFile
import org.modelix.model.util.pmap.CustomPMap
import org.modelix.model.util.pmap.SmallPMap.Companion.empty

/*Generated by MPS */
class CloudTransientModule(name: String?, id: ModuleId?) : AbstractModule(null as IFile?), IUserObjectContainer,
    TransientSModule {
    private val myDescriptor: ModuleDescriptor
    private var userObjects: CustomPMap<Any, Any>? = empty()

    init {
        myDescriptor = ModuleDescriptor()
        myDescriptor.setId(id)
        myDescriptor.setNamespace(name)
        setModuleReference(myDescriptor.getModuleReference())
    }

    public override fun <T> getUserObject(key: UserObjectKey<T>): T {
        return userObjects!!.get(key) as T
    }

    public override fun <T> putUserObject(key: UserObjectKey<T>, value: T) {
        userObjects = userObjects!!.put(key, value)
    }

    public override fun getModuleDescriptor(): ModuleDescriptor? {
        return myDescriptor
    }

    override fun collectMandatoryFacetTypes(types: Set<String>) {}
    public override fun isPackaged(): Boolean {
        return false
    }

    public override fun isReadOnly(): Boolean {
        return false
    }
}
