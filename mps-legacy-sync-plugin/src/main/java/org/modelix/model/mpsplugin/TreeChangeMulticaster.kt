package org.modelix.model.mpsplugin

import jetbrains.mps.internal.collections.runtime.ListSequence
import jetbrains.mps.internal.collections.runtime.Sequence
import org.modelix.model.api.ITreeChangeVisitor
import org.modelix.model.api.ITreeChangeVisitorEx

/*Generated by MPS */ /**
 * ITree.visitChanges can be expensive. The performance is better if all listeners iterate over the changes together.
 */
class TreeChangeMulticaster(val visitors: List<ITreeChangeVisitor>) : ITreeChangeVisitorEx {

    public override fun childrenChanged(parent: Long, role: String?) {
        for (visitor: ITreeChangeVisitor in ListSequence.fromList(visitors)) {
            visitor.childrenChanged(parent, role)
        }
    }

    public override fun containmentChanged(node: Long) {
        for (visitor: ITreeChangeVisitor in ListSequence.fromList(visitors)) {
            visitor.containmentChanged(node)
        }
    }

    public override fun propertyChanged(node: Long, role: String) {
        for (visitor: ITreeChangeVisitor in ListSequence.fromList(visitors)) {
            visitor.propertyChanged(node, role)
        }
    }

    public override fun referenceChanged(node: Long, role: String) {
        for (visitor: ITreeChangeVisitor in ListSequence.fromList(visitors)) {
            visitor.referenceChanged(node, role)
        }
    }

    public override fun nodeAdded(node: Long) {
        for (visitor: ITreeChangeVisitorEx in ListSequence.fromList(visitors).ofType(
            ITreeChangeVisitorEx::class.java
        )) {
            visitor.nodeAdded(node)
        }
    }

    public override fun nodeRemoved(node: Long) {
        for (visitor: ITreeChangeVisitorEx in ListSequence.fromList(visitors).ofType(
            ITreeChangeVisitorEx::class.java
        )) {
            visitor.nodeRemoved(node)
        }
    }
}
