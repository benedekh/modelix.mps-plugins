package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.ActionManager
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.extensions.PluginId
import jetbrains.mps.plugins.actions.GeneratedActionGroup
import jetbrains.mps.workbench.action.ApplicationPlugin

/*Generated by MPS */
class CloudActionsForPhysicalProjectsActionGroup(plugin: ApplicationPlugin) :
    GeneratedActionGroup("CloudActionsForPhysicalProjects", ID, plugin) {
    init {
        setIsInternal(false)
        isPopup = false
        run({
            val newAction: GeneratedActionGroup =
                CloudActionsForPhysicalProjectsCloudActionsActionGroup(applicationPlugin)
            val manager: ActionManager = ActionManager.getInstance()
            var oldAction: AnAction? = manager.getAction(newAction.id)
            if (oldAction == null) {
                manager.registerAction(newAction.id, newAction, PluginId.getId("org.modelix.model.mpsplugin"))
                oldAction = newAction
            }
            this@CloudActionsForPhysicalProjectsActionGroup.addAction(oldAction)
        })
    }

    companion object {
        val ID: String = "org.modelix.model.mpsplugin.plugin.CloudActionsForPhysicalProjects_ActionGroup"
    }
}
