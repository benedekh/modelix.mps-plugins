package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.project.Project
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes._return_P0_E0
import jetbrains.mps.ide.actions.MPSCommonDataKeys
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory
import jetbrains.mps.workbench.action.BaseAction
import org.jetbrains.mps.openapi.language.SProperty
import org.modelix.model.api.IBranch
import org.modelix.model.area.PArea
import org.modelix.model.client.IModelClient
import org.modelix.model.lazy.CLVersion
import org.modelix.model.lazy.CLVersion.Companion.loadFromHash
import org.modelix.model.lazy.RepositoryId
import org.modelix.model.mpsplugin.ModelServerConnection
import org.modelix.model.mpsplugin.SharedExecutors
import org.modelix.model.mpsplugin.history.CloudBranchTreeNode
import org.modelix.model.mpsplugin.history.RepositoryTreeNode
import javax.swing.Icon
import javax.swing.SwingUtilities
import javax.swing.tree.TreeNode

/*Generated by MPS */
class LoadHistoryForBranchAction : BaseAction("Show History", "", ICON) {
    init {
        setIsAlwaysVisible(false)
        setExecuteOutsideCommand(true)
    }

    override fun isDumbAware(): Boolean {
        return true
    }

    override fun collectActionData(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!(super.collectActionData(event, _params))) {
            return false
        }
        run({
            val p: Project? = event.getData(CommonDataKeys.PROJECT)
            if (p == null) {
                return false
            }
        })
        run({
            val p: TreeNode? = event.getData(MPSCommonDataKeys.TREE_NODE)
            if (p == null) {
                return false
            }
        })
        return true
    }

    public override fun doExecute(event: AnActionEvent, _params: Map<String, Any>) {
        val branchTNode: CloudBranchTreeNode? = event.getData(MPSCommonDataKeys.TREE_NODE) as CloudBranchTreeNode?
        val treeTNode: RepositoryTreeNode = branchTNode!!.getAncestor(RepositoryTreeNode::class.java)
        val infoBranch: IBranch? = treeTNode.modelServer.infoBranch
        val branchName: String = PArea((infoBranch)!!).executeRead({
            SPropertyOperations.getString(
                branchTNode.branchInfo,
                PROPS.`name$MnvL`,
            )
        })
        val repositoryId: RepositoryId = treeTNode.repositoryId
        val branchKey: String = repositoryId!!.getBranchReference(branchName).getKey()
        val modelServer: ModelServerConnection = treeTNode.modelServer
        val client: IModelClient = modelServer!!.getClient()
        SharedExecutors.FIXED.execute(object : Runnable {
            override fun run() {
                val versionHash: String? = client!!.get(branchKey)
                val version: CLVersion = loadFromHash((versionHash)!!, client.storeCache)
                SwingUtilities.invokeLater(object : Runnable {
                    override fun run() {
                        CloudHistoryToolTool.Companion.load(
                            event.getData<Project>(CommonDataKeys.PROJECT),
                            modelServer,
                            repositoryId,
                            object : _return_P0_E0<CLVersion> {
                                override fun invoke(): CLVersion {
                                    return version
                                }
                            },
                        )
                    }
                })
            }
        })
    }

    private object PROPS {
        /*package*/
        val `name$MnvL`: SProperty = MetaAdapterFactory.getProperty(
            -0x3154ae6ada15b0deL,
            -0x646defc46a3573f4L,
            0x110396eaaa4L,
            0x110396ec041L,
            "name",
        )
    }

    companion object {
        private val ICON: Icon? = null
    }
}
