package org.modelix.model.mpsplugin

import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory
import org.jetbrains.mps.openapi.language.SConcept
import org.jetbrains.mps.openapi.language.SContainmentLink
import org.jetbrains.mps.openapi.language.SProperty
import org.modelix.model.api.INode
import org.modelix.model.api.PNodeAdapter
import org.modelix.model.api.PNodeAdapter.Companion.wrap
import org.modelix.model.area.PArea
import org.modelix.model.mpsadapters.mps.SConceptAdapter
import java.util.UUID

/*Generated by MPS */
object PNodeAdapterCreationMethods {
    fun createModuleInRepository(_this: PNodeAdapter?, name: String?): INode {
        // TODO check the concept of this node is Repository
        return PArea(_this!!.branch).executeWrite<INode>({
            val newModule: INode = _this.addNewChild(
                LINKS.`modules$jBPn`.getName(), -1, SConceptAdapter.Companion.wrap(
                    CONCEPTS.`Module$4i`
                )
            )
            newModule.setPropertyValue(PROPS.`name$MnvL`.getName(), name)
            newModule.setPropertyValue(PROPS.`id$7MjP`.getName(), UUID.randomUUID().toString())
            newModule
        })
    }

    fun createProject(_this: PNodeAdapter?, name: String?): INode {
        // TODO check the concept of this node is Repository
        return PArea(_this!!.branch).executeWrite<INode>({
            val newModule: INode = _this.addNewChild(
                LINKS.`projects$NW07`.getName(), -1, SConceptAdapter.Companion.wrap(
                    CONCEPTS.`Project$An`
                )
            )
            newModule.setPropertyValue(PROPS.`name$MnvL`.getName(), name)
            newModule
        })
    }

    private object LINKS {
        /*package*/
        val `modules$jBPn`: SContainmentLink = MetaAdapterFactory.getContainmentLink(
            0xa7577d1d4e5431dL,
            -0x674e051c70651180L,
            0x69652614fd1c516L,
            0x69652614fd1c517L,
            "modules"
        )

        /*package*/
        val `projects$NW07`: SContainmentLink = MetaAdapterFactory.getContainmentLink(
            0xa7577d1d4e5431dL,
            -0x674e051c70651180L,
            0x69652614fd1c516L,
            0x620a8558361d3e0cL,
            "projects"
        )
    }

    private object CONCEPTS {
        /*package*/
        val `Module$4i`: SConcept = MetaAdapterFactory.getConcept(
            0xa7577d1d4e5431dL,
            -0x674e051c70651180L,
            0x69652614fd1c50fL,
            "org.modelix.model.repositoryconcepts.structure.Module"
        )

        /*package*/
        val `Project$An`: SConcept = MetaAdapterFactory.getConcept(
            0xa7577d1d4e5431dL,
            -0x674e051c70651180L,
            0x37a0917d689de959L,
            "org.modelix.model.repositoryconcepts.structure.Project"
        )
    }

    private object PROPS {
        /*package*/
        val `name$MnvL`: SProperty = MetaAdapterFactory.getProperty(
            -0x3154ae6ada15b0deL,
            -0x646defc46a3573f4L,
            0x110396eaaa4L,
            0x110396ec041L,
            "name"
        )

        /*package*/
        val `id$7MjP`: SProperty = MetaAdapterFactory.getProperty(
            0xa7577d1d4e5431dL,
            -0x674e051c70651180L,
            0x69652614fd1c50fL,
            0x3aa34013f2a802e0L,
            "id"
        )
    }
}
