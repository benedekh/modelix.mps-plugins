package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import jetbrains.mps.workbench.action.BaseAction
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import org.modelix.model.mpsplugin.ModelServerConnections
import java.util.Locale
import javax.swing.Icon

/*Generated by MPS */
class AddModelServerAction : BaseAction("Add Model Server", "", ICON) {
    init {
        setIsAlwaysVisible(false)
        setExecuteOutsideCommand(true)
    }

    override fun isDumbAware(): Boolean {
        return true
    }

    override fun collectActionData(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!(super.collectActionData(event, _params))) {
            return false
        }
        run({
            val p: Project? = event.getData(CommonDataKeys.PROJECT)
            if (p == null) {
                return false
            }
        })
        return true
    }

    public override fun doExecute(event: AnActionEvent, _params: Map<String, Any>) {
        var url: String? = Messages.showInputDialog(
            event.getData(CommonDataKeys.PROJECT),
            "URL",
            "Add Model Server",
            null,
            "http://",
            null,
        )
        if (!(url!!.lowercase(Locale.getDefault()).startsWith("http://")) && !(
                url.lowercase(Locale.getDefault())
                    .startsWith("https://")
                )
        ) {
            Messages.showErrorDialog(
                event.getData(CommonDataKeys.PROJECT),
                "Invalid URL: it should shart with http:// or https://",
                "Add Model Server",
            )
            return
        }
        if (url != null && (url != null && url.length > 0)) {
            if (!(url.endsWith("/"))) {
                val originalUrl: String = url
                url = url + "/"
                LOG.info("A Model Server URL should end with a slash. URL modified from '" + originalUrl + "' to '" + url + "'")
            }
            if (ModelServerConnections.instance.existModelServer(url)) {
                Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "Already present!", "Add Model Server")
                return
            }
            val token: String? = null
            val finalUrl: String = url
            //      if (AuthenticationManager.getAuthenticationProcess(finalUrl).areWeUsingAuthentication(event.getData(CommonDataKeys.PROJECT))) {
//        AuthenticationManager.getAuthenticationProcess(finalUrl).getToken(event.getData(CommonDataKeys.PROJECT), new Consumer<String>() {
//          @Override
//          public void accept(String token) {
//            ModelServerConnection modelServer = ModelServerConnections.getInstance().ensureModelServerIsPresent(finalUrl);
//            PersistedBindingConfiguration.getInstance(event.getData(CommonDataKeys.PROJECT)).ensureModelServerIsPresent(modelServer);
//          }
//        });
//      } else {
            val modelServer =
                ModelServerConnections.instance.ensureModelServerIsPresent(finalUrl)
            PersistedBindingConfiguration.Companion.getInstance(
                event.getData<Project>(
                    CommonDataKeys.PROJECT,
                ),
            )!!.ensureModelServerIsPresent(modelServer)
            //      }
        }
    }

    companion object {
        private val LOG: Logger = LogManager.getLogger(AddModelServerAction::class.java)
        private val ICON: Icon? = null
    }
}
