package org.modelix.model.mpsplugin.plugin

import org.apache.log4j.Level
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import org.modelix.common.PropertyOrEnv
import java.util.Locale
import java.util.Objects

/*Generated by MPS */
object ModelixConfigurationSystemProperties {
    private val LOG: Logger = LogManager.getLogger(
        ModelixConfigurationSystemProperties::class.java,
    )
    var EXECUTION_MODE_SYSPROP: String = "modelix.executionMode"
    var LOAD_PERSISTENT_BINDIND_SYSPROP: String = "modelix.loadPersistentBinding"
    var EXPORT_PATH_SYSPROP: String? = ModelixExportConfiguration.PATH
    var IMPORT_PATH_SYSPROP: String = "modelix.import.path"
    var CLOUD_REPOS_SYSPROP: String = "modelix.cloud.repos"
    fun shouldLoadPersistentBinding(): Boolean {
        val flagString: String? = PropertyOrEnv.get(LOAD_PERSISTENT_BINDIND_SYSPROP)
        if (flagString == null || flagString.isEmpty()) {
            return true
        }
        return flagString.toBoolean()
    }

    val executionMode: EModelixExecutionMode
        get() {
            val executionModeString: String? = PropertyOrEnv.get(EXECUTION_MODE_SYSPROP)
            var executionMode: EModelixExecutionMode = EModelixExecutionMode.DEFAULT
            if ((executionModeString == null || executionModeString.length == 0)) {
                val value: String? = PropertyOrEnv.get("disable.autobinding")
                if (value != null && (Objects.equals(value.lowercase(Locale.getDefault()), "true"))) {
                    executionMode = EModelixExecutionMode.INTEGRATION_TESTS
                }
                if (isNotEmptyString(PropertyOrEnv.get(EXPORT_PATH_SYSPROP))) {
                    executionMode = EModelixExecutionMode.MODEL_EXPORT
                }
            } else {
                try {
                    executionMode = EModelixExecutionMode.valueOf(executionModeString)
                } catch (ex: IllegalArgumentException) {
                    if (LOG.isEnabledFor(Level.ERROR)) {
                        LOG.error("Unknown execution mode: " + executionModeString, ex)
                    }
                }
            }
            System.setProperty(EXECUTION_MODE_SYSPROP, executionMode.name)
            return executionMode
        }

    private fun isNotEmptyString(str: String?): Boolean {
        return str != null && str.length > 0
    }
}
