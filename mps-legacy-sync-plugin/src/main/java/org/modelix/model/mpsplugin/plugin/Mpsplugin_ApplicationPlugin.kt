package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.extensions.PluginId
import jetbrains.mps.ide.actions.ProjectActions_ActionGroup
import jetbrains.mps.ide.actions.SolutionActions_ActionGroup
import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin
import jetbrains.mps.plugins.part.ApplicationPluginPart

/*Generated by MPS */
class Mpsplugin_ApplicationPlugin : BaseApplicationPlugin() {
    private val myId: PluginId = PluginId.getId("org.modelix.model.mpsplugin")
    public override fun getId(): PluginId {
        return myId
    }

    override fun createGroups() {
        // actions w/o parameters
        addAction(AddBranch_Action())
        addAction(AddModelNode_Action())
        addAction(AddModelServer_Action())
        addAction(AddModuleNode_Action())
        addAction(AddProjectBinding_Action())
        addAction(AddProjectNode_Action())
        addAction(AddRepository_Action())
        addAction(AddTransientModuleBinding_Action())
        addAction(CheckoutAndSyncModule_Action())
        addAction(CheckoutModule_Action())
        addAction(DeleteModule_Action())
        addAction(DeleteProject_Action())
        addAction(GetCloudRepositorySize_Action())
        addAction(LoadHistoryForBranch_Action())
        addAction(LoadHistoryForRepository_Action())
        addAction(NavigateToMpsNode_Action())
        addAction(Reconnect_Action())
        addAction(RemoveModelServer_Action())
        addAction(RemoveRepository_Action())
        addAction(RemoveTransientModuleBinding_Action())
        addAction(ShowAuthenticationInfo_Action())
        addAction(ShowProperties_Action())
        addAction(ShowReferences_Action())
        addAction(StoreAllModules_Action())
        addAction(SwitchBranch_Action())
        addAction(Unbind_Action())
        // groups
        addGroup(CloudActionsForPhysicalModulesCloudActions_ActionGroup(this))
        addGroup(CloudActionsForPhysicalModules_ActionGroup(this))
        addGroup(CloudActionsForPhysicalProjectsCloudActions_ActionGroup(this))
        addGroup(CloudActionsForPhysicalProjects_ActionGroup(this))
        addGroup(CloudBindingGroup_ActionGroup(this))
        addGroup(CloudBranchGroup_ActionGroup(this))
        addGroup(CloudNodeGroupAddChild_ActionGroup(this))
        addGroup(CloudNodeGroupSetProperty_ActionGroup(this))
        addGroup(CloudNodeGroup_ActionGroup(this))
        addGroup(CloudRootGroup_ActionGroup(this))
        addGroup(ModelServerGroup_ActionGroup(this))
        addGroup(RepositoryGroup_ActionGroup(this))
    }

    override fun adjustRegularGroups() {
        insertGroupIntoAnother(
            CloudActionsForPhysicalProjects_ActionGroup.Companion.ID,
            ProjectActions_ActionGroup.ID,
            ProjectActions_ActionGroup.LABEL_ID_projectNew,
        )
        insertGroupIntoAnother(
            CloudActionsForPhysicalModules_ActionGroup.Companion.ID,
            SolutionActions_ActionGroup.ID,
            SolutionActions_ActionGroup.LABEL_ID_contents,
        )
    }

    public override fun fillCustomParts(parts: MutableList<ApplicationPluginPart>) {
        parts.add(ApplicationPlugin_AppPluginPart())
    }
}
