package org.modelix.model.mpsplugin.history

import jetbrains.mps.ide.ui.tree.TextTreeNode
import jetbrains.mps.internal.collections.runtime.Sequence
import org.modelix.model.api.IBranch.addListener
import org.modelix.model.api.IBranch.removeListener
import org.modelix.model.client.ActiveBranch.addListener
import org.modelix.model.client.ActiveBranch.removeListener
import org.modelix.model.client.IIndirectBranch.addListener
import org.modelix.model.client.IIndirectBranch.removeListener
import org.modelix.model.mpsplugin.CloudIcons
import org.modelix.model.mpsplugin.ModelServerConnection
import org.modelix.model.mpsplugin.ModelServerConnections
import kotlin.jvm.functions.Function0.invoke
import kotlin.jvm.functions.Function1.invoke

/*Generated by MPS */
class CloudRootTreeNode() : TextTreeNode(CloudIcons.ROOT_ICON, "Cloud") {
    private var myInitialized: Boolean = false
    private val repositoriesListener: ModelServerConnections.IListener = object : ModelServerConnections.IListener {
        public override fun repositoriesChanged() {
            update()
            init()
        }
    }

    init {
        setAllowsChildren(true)
        init()
    }

    public override fun isInitialized(): Boolean {
        return myInitialized
    }

    override fun doInit() {
        myInitialized = true
        populate()
    }

    override fun doUpdate() {
        removeAllChildren()
        myInitialized = false
    }

    protected fun populate() {
        for (repo: ModelServerConnection? in Sequence.fromIterable<ModelServerConnection?>(
            ModelServerConnections.Companion.getInstance().getModelServers()
        )) {
            add(ModelServerTreeNode(repo))
        }
    }

    override fun onAdd() {
        super.onAdd()
        ModelServerConnections.Companion.getInstance().addListener(repositoriesListener)
    }

    override fun onRemove() {
        super.onRemove()
        ModelServerConnections.Companion.getInstance().removeListener(repositoriesListener)
    }
}
