package org.modelix.model.mpsplugin

import org.apache.log4j.Level
import org.apache.log4j.LogManager
import org.apache.log4j.Logger
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit

/*Generated by MPS */
object SharedExecutors {
    private val LOG: Logger = LogManager.getLogger(SharedExecutors::class.java)
    val FIXED: ExecutorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() + 1)
    val SCHEDULED: ScheduledExecutorService =
        Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors() + 1)

    fun shutdownAll() {
        SCHEDULED.shutdown()
        FIXED.shutdown()
    }

    fun fixDelay(milliSeconds: Int, r: Runnable): ScheduledFuture<*> {
        return SCHEDULED.scheduleWithFixedDelay(object : Runnable {
            public override fun run() {
                try {
                    r.run()
                } catch (ex: Exception) {
                    if (LOG.isEnabledFor(Level.ERROR)) {
                        LOG.error("", ex)
                    }
                }
            }
        }, milliSeconds.toLong(), milliSeconds.toLong(), TimeUnit.MILLISECONDS)
    }
}
