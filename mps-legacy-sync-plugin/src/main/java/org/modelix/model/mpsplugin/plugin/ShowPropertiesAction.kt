package org.modelix.model.mpsplugin.plugin

import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import jetbrains.mps.ide.actions.MPSCommonDataKeys
import jetbrains.mps.internal.collections.runtime.ISelector
import jetbrains.mps.internal.collections.runtime.ListSequence
import jetbrains.mps.workbench.action.ActionAccess
import jetbrains.mps.workbench.action.BaseAction
import org.modelix.model.api.INode
import org.modelix.model.api.IProperty
import org.modelix.model.mpsplugin.CloudRepository
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode
import org.modelix.model.mpsplugin.history.CloudNodeTreeNodeBinding
import org.modelix.model.mpsplugin.history.TreeNodeClassification
import javax.swing.Icon
import javax.swing.tree.TreeNode

/*Generated by MPS */
class ShowPropertiesAction : BaseAction("Show Properties", "", ICON) {
    init {
        setIsAlwaysVisible(false)
        actionAccess = ActionAccess.NONE
    }

    override fun isDumbAware(): Boolean {
        return true
    }

    override fun isApplicable(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        return TreeNodeClassification.isProperNode(event.getData(MPSCommonDataKeys.TREE_NODE))
    }

    public override fun doUpdate(event: AnActionEvent, _params: Map<String, Any>) {
        setEnabledState(event.presentation, isApplicable(event, _params))
    }

    override fun collectActionData(event: AnActionEvent, _params: Map<String, Any>): Boolean {
        if (!(super.collectActionData(event, _params))) {
            return false
        }
        run({
            val p: Project? = event.getData(CommonDataKeys.PROJECT)
            if (p == null) {
                return false
            }
        })
        run({
            val p: TreeNode? = event.getData(MPSCommonDataKeys.TREE_NODE)
            if (p == null) {
                return false
            }
        })
        return true
    }

    public override fun doExecute(event: AnActionEvent, _params: Map<String, Any>) {
        val nodeTreeNode: CloudNodeTreeNode = (event.getData(MPSCommonDataKeys.TREE_NODE) as CloudNodeTreeNode?)!!
        val treeInRepository: CloudRepository = CloudNodeTreeNodeBinding.getTreeInRepository(nodeTreeNode)
        // I need to know in which module to look for this node
        val sb: StringBuilder = StringBuilder()
        treeInRepository.runRead(object : Runnable {
            override fun run() {
                val node: INode = nodeTreeNode.node
                val properties: List<IProperty> = node.concept!!.getAllProperties()
                for (property: String? in ListSequence.fromList<IProperty>(properties)
                    .select<String>(object : ISelector<IProperty, String>() {
                        override fun select(it: IProperty): String {
                            return it.name
                        }
                    }).concat(ListSequence.fromList<String>(node.getPropertyRoles())).distinct()) {
                    sb.append(property)
                    sb.append(" = ")
                    sb.append(node.getPropertyValue((property)!!))
                    sb.append("\n")
                }
            }
        })
        Messages.showMessageDialog(event.getData(CommonDataKeys.PROJECT), sb.toString(), "Properties", null)
    }

    companion object {
        private val ICON: Icon? = null
    }
}
