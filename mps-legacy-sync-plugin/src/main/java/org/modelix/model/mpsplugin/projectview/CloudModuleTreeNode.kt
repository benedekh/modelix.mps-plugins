package org.modelix.model.mpsplugin.projectview

import jetbrains.mps.ide.ui.tree.module.ProjectModuleTreeNode
import jetbrains.mps.ide.ui.tree.smodel.SModelTreeNode
import jetbrains.mps.internal.collections.runtime.ISelector
import jetbrains.mps.internal.collections.runtime.Sequence
import org.jetbrains.mps.openapi.model.SModel
import org.jetbrains.mps.openapi.model.SModelReference
import org.jetbrains.mps.openapi.module.SModule
import org.jetbrains.mps.openapi.module.SModuleListenerBase
import javax.swing.JTree
import javax.swing.SwingUtilities
import javax.swing.tree.DefaultTreeModel

/*Generated by MPS */
class CloudModuleTreeNode(module: SModule) : ProjectModuleTreeNode(module) {
    private var myInitialized: Boolean = false
    private val moduleListener: SModuleListenerBase = object : SModuleListenerBase() {
        public override fun modelAdded(module: SModule, model: SModel) {
            update()
        }

        public override fun modelRemoved(module: SModule, ref: SModelReference) {
            SwingUtilities.invokeLater(object : Runnable {
                public override fun run() {
                    update()
                }
            })
        }
    }

    init {
        setNodeIdentifier(module.getModuleId().toString())
        setIcon(CloudProjectViewExtension.Companion.MODULE_ICON)
        module.addModuleListener(moduleListener)
    }

    public override fun getModuleText(): String {
        return (getModule().getModuleName())!!
    }

    public override fun isInitialized(): Boolean {
        return myInitialized
    }

    override fun doInit() {
        populate()
        myInitialized = true
    }

    protected fun populate() {
        val models: Iterable<SModel> = getModule().getModels()
        for (model: SModel? in Sequence.fromIterable<SModel>(models).sort(
            object : ISelector<SModel, String>() {
                public override fun select(it: SModel): String {
                    return it.getName().getLongName()
                }
            },
            true,
        )) {
            val tn: SModelTreeNode = SModelTreeNode((model)!!)
            tn.setIcon(CloudProjectViewExtension.Companion.MODEL_ICON)
            tn.setBaseIcon(CloudProjectViewExtension.Companion.MODEL_ICON)
            add(tn)
        }
        check_7wx4yo_a2a8(check_7wx4yo_a0c0i(getTree(), this), this)
    }

    override fun doUpdate() {
        super.doUpdate()
        myInitialized = false
        removeAllChildren()
    }

    fun dispose() {
        getModule().removeModuleListener(moduleListener)
    }

    companion object {
        private fun check_7wx4yo_a2a8(
            checkedDotOperand: DefaultTreeModel?,
            checkedDotThisExpression: CloudModuleTreeNode,
        ) {
            if (null != checkedDotOperand) {
                checkedDotOperand.nodeStructureChanged(checkedDotThisExpression)
            }
        }

        private fun check_7wx4yo_a0c0i(
            checkedDotOperand: JTree?,
            checkedDotThisExpression: CloudModuleTreeNode,
        ): DefaultTreeModel? {
            if (null != checkedDotOperand) {
                return checkedDotOperand.getModel() as DefaultTreeModel?
            }
            return null
        }
    }
}
